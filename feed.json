{
    "version": "https://jsonfeed.org/version/1",
    "title": "SoftLeaderGy",
    "subtitle": "Gy Blog",
    "icon": "https://softleadergy.github.io/images/favicon.ico",
    "description": "welcome to SoftLeaderGy Blog",
    "home_page_url": "https://softleadergy.github.io",
    "items": [
        {
            "id": "https://softleadergy.github.io/nginx%E9%83%A8%E7%BD%B2/",
            "url": "https://softleadergy.github.io/nginx%E9%83%A8%E7%BD%B2/",
            "title": "nginx离线部署",
            "date_published": "2023-08-23T09:50:49.000Z",
            "content_html": "<h1 id=\"一-离线安装\"><a class=\"anchor\" href=\"#一-离线安装\">#</a> 一、离线安装</h1>\n<ul>\n<li>安装包获取：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20veWFuZy1ndW8tY29kZS9uZ2lueC1yZWx5LW9uL3JlbGVhc2VzL3RhZy9uZ2lueC0xLjE4LjAlRTglQkQlQUYlRTQlQkIlQjYlRTMlODAlODElRTQlQkUlOUQlRTglQjUlOTYlRTclQTYlQkIlRTclQkElQkYlRTUlQUUlODklRTglQTMlODUlRTUlOEMlODU=\">nginx-1.18.0 软件、依赖离线安装包・洋洋洋 /nginx-rely-on - Gitee.com</span></li>\n</ul>\n<h2 id=\"11-上传安装包\"><a class=\"anchor\" href=\"#11-上传安装包\">#</a> 1.1、上传安装包</h2>\n<ul>\n<li>nginx 安装包： <code>nginx-1.18.0.tar.gz</code></li>\n<li>nginx 安装依赖包： <code>gcc.zip</code> 、 <code>tools.zip</code></li>\n<li>openssl 源码包： <code>openssl-1.1.1d.tar.gz</code></li>\n</ul>\n<h2 id=\"12-解压安装\"><a class=\"anchor\" href=\"#12-解压安装\">#</a> 1.2、解压安装</h2>\n<ol>\n<li>解压依赖包 <code>gcc.zip</code> 、 <code>tools.zip</code></li>\n<li>解压 openssl 源码包 <code>openssl-1.1.1d.tar.gz</code> （有的 nginx 版本需要，在 <code>步骤7</code>  最后可配置，不需要可以去掉）</li>\n<li>进入 gcc、tools 文件夹内</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1pbnN0YWxsLWtrMGx4azY2NGxqaTlieHU0YmRndW51Zy5zaA==\">分别执行里边的 install.sh</span>   ( <code>sh install.sh</code> )</li>\n<li>解压 nginx 安装包</li>\n<li>进入解压后的 nginx 文件夹</li>\n<li>执行命令（最后的 <code>--with-openssl=/home/openssl-1.1.1d</code>  需要指定 <code>步骤2</code>  解压的源码包）</li>\n</ol>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./configure --prefix=/opt/nginx --with-http_stub_status_module --with-http_ssl_module  --with-http_gzip_static_module --with-openssl=/home/openssl-1.1.1d</pre></td></tr></table></figure><ol start=\"8\">\n<li>如果不报错执行 <code>make &amp;&amp; make install</code></li>\n<li>执行后可以进到 <code>/opt/nginx/sbin</code>  下看能否执行 <code>./nginx</code></li>\n<li>可以 <code>curl [http://localhost:80/](http://localhost:80/)</code>  如果返回 <code>Welcome to nginx!</code>  说明 nginx 部署完成！</li>\n</ol>\n<h2 id=\"13-说明\"><a class=\"anchor\" href=\"#13-说明\">#</a> 1.3、说明</h2>\n<ul>\n<li>\n<p>在 <code>1.2</code>  节中如果第 7 步出现错误，基本上就是缺依赖</p>\n</li>\n<li>\n<p>查看报错缺少什么依赖</p>\n</li>\n<li>\n<p>点击<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvP3NwbT01MTc2LjI4MDU1NjI1LkpfNFZZZ2YxOHhObFRBeUZGYk91T1FlLjEyMS4xMTQ3MTU0YXBybEh0YiZhbXA7c2NtPTIwMTQwNzIyLk1fOTQ4OTYyNi5fLlZfMQ==\">阿里巴巴开源镜像站 - OPSX 镜像站 - 阿里云开发者社区</span> -&gt; 选择资源包 -&gt; 进行下载缺少的资源包</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1692761159805-dd61dfaa-1548-459a-9075-e00b5438b866.png\" alt=\"image.png\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1692761326781-79cc2280-cce6-4ead-b451-1475631f8ec3.png\" alt=\"image.png\" /></p>\n</li>\n<li>\n<p>将下载好的.rpm 文件依赖包上传至服务器</p>\n</li>\n<li>\n<p>执行   <code>rpm -Uvh XXXXX.rpm --nodeps --force</code>  或者可以放在一个文件夹下 直接执行 <code>rpm -Uvh *.rpm --nodeps --force</code></p>\n</li>\n<li>\n<p>然后在重复 <code>1.2节</code> 的 <code>7步骤</code> 及以后</p>\n</li>\n</ul>\n<hr />\n",
            "tags": [
                "nginx"
            ]
        },
        {
            "id": "https://softleadergy.github.io/Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/",
            "url": "https://softleadergy.github.io/Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/",
            "title": "Github搭建图床",
            "date_published": "2023-07-25T13:34:20.000Z",
            "content_html": "<h1 id=\"什么是图床\"><a class=\"anchor\" href=\"#什么是图床\">#</a> 什么是图床</h1>\n<p>所谓图床，就是存储图片的服务器。<br />\n我们写在线文档的时候，如果我们把图片仅仅存放在本地，那么别人来去访问这个文档的时候，图片就看不到了。<br />\n那么，为了避免这样一种情况，使得别人在访问我的文档的时候，图片不会丢失，那么我就需要将我的图片存放到别人也可以访问的服务器上。通常，我们就称这样的服务器为图床。</p>\n<blockquote>\n<p>因为是 github 搭建图床，访问 github 忙的情况，就得自行解决了。</p>\n</blockquote>\n<h1 id=\"github创建图床服务器\"><a class=\"anchor\" href=\"#github创建图床服务器\">#</a> github 创建图床服务器</h1>\n<h2 id=\"创建仓库\"><a class=\"anchor\" href=\"#创建仓库\">#</a> 创建仓库</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162281589-9cfdf2a1-5873-48cd-9037-7676ed2a6f6e-20230725130909379.png\" alt=\"image.png\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162326170-42ceef53-a133-4428-b08a-6373e89492a5-20230725130936104-20230725130952938.png\" alt=\"image.png\" /></p>\n<h2 id=\"生成token令牌\"><a class=\"anchor\" href=\"#生成token令牌\">#</a> 生成 token 令牌</h2>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162480459-8a55fda6-4db0-4e52-8f9a-e2f385295c69.png\" alt=\"image.png\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162528476-55e6e2db-c308-4227-960b-1be095a2c2d6.png\" alt=\"image.png\" /><br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162590220-2fa05207-c299-4304-8b43-4aa38ba0b97c.png\" alt=\"image.png\" /><br />\n 紧接着把这个 repo 全部选上：<br />\n然后拉到底部，选择创建就行了。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162626395-4e7f20a2-414f-4490-a8c8-19e580fd320b-20230725131143373.png\" alt=\"image.png\" /><br />\n 这个 Token 是你的服务器（即你的账户下的 github 服务器）的令牌，暂时和你的仓库还没有什么关系。<br />\n然后创建完以后，就会出现一串 Token 字符串，你把这个 Token 数字复制、保存下来 (可以新创一个 txt 文件，保存到里面)。因为你可能一会儿就见不到了。</p>\n<h2 id=\"使用picgo来实现图片上传\"><a class=\"anchor\" href=\"#使用picgo来实现图片上传\">#</a> 使用 PicGo 来实现图片上传</h2>\n<p>首先要说一下，PicGo 是一款软件。我们就是用它来实现图片上传的。所以说，它是核心软件。</p>\n<h3 id=\"下载picgo\"><a class=\"anchor\" href=\"#下载picgo\">#</a> 下载 PicGo</h3>\n<blockquote>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLnNkdS5lZHUuY24vZ2l0aHViLXJlbGVhc2UvTW9sdW5lcmZpbm5fUGljR28vdjIuMy4xLw==\">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/v2.3.1/</span></p>\n</blockquote>\n<h3 id=\"picgo配置\"><a class=\"anchor\" href=\"#picgo配置\">#</a> PicGo 配置</h3>\n<ul>\n<li>1、选择【图床设置】-&gt;【Github】然后进行配置：</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690162867192-68818820-d3af-4429-948a-a44d51c43199-20230725131158482.png\" alt=\"image.png\" /></p>\n<ul>\n<li>具体配置方法：\n<ul>\n<li>设定仓库名，实际上就是用户名 + 仓库名。这个仓库就是你刚刚在 2.1 中新建的仓库。具体来说，就是这个东西：</li>\n<li>设定分支名：就是你的仓库在哪个分支里，就填哪个分支。一般有 main 分支，master 分支等。我这里是自己新创建的一个 img 分支。你填自己所在的分支就好。关于分支，具体来说，可以在这里查看：</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690164887946-36ea3fed-912a-4f91-80a8-b37ed525d5b9-20230725131211469.png\" alt=\"image.png\" /></p>\n<ul>\n<li>设定 Token：就是刚刚在 2.2 中我们复制的 Token 字符串。将其填进去即可。</li>\n<li>设定存储路径，一般来说，它可以是你项目仓库中的一个文件夹。我们这里就统一设置成了 img/</li>\n<li>设置自定义域名。这个是比较关键的。我们可以用一个免费的加速域名作为我们自定义域名。</li>\n</ul>\n<p>那么你所设置的就应当为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doLw==\"> https://cdn.jsdelivr.net/gh/</span> + 你的账户名 + 你的仓库名 @你的分支名。比如，我上面的就是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2ppYW54aWFuZ3d1ZGkvTXlQaWNAaW1n\"> https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img</span> 按照需要改成你自己的。</p>\n<blockquote>\n<p>需要注意的是，这里一定要设置成 @，而不要设置成 / 我也是花了很长很长时间才搞明白。。。设置成 / 以后，你会惊奇地发现，它在你的 typora 里面显示不了。。。配置完以后，就可以点击确定，然后也可以将其设置为默认图床。</p>\n</blockquote>\n<h3 id=\"用picgo上传图片\"><a class=\"anchor\" href=\"#用picgo上传图片\">#</a> 用 PicGo 上传图片</h3>\n<p>直接拖拽就可以了。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690165351118-cb1c1d43-3b9c-4506-bc1b-8f94df26f217-20230725131220932.png\" alt=\"image.png\" /><br />\n 然后，我们能够在相册中看到我们已经上传的图片，可以查看、复制已经上传的图片的 URL，同时也可以将上传的图片删除。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690165464434-75ce8fe4-2dc1-44d2-89eb-2c2d8854b487-20230725131227064.png\" alt=\"image.png\" /><br />\n 然后，我们也可以对 PicGo 进行一系列的设置。<br />\n比如启用时间戳，这样在多次上传同一张图片的时候就不会有问题了。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690165485009-6358b3ac-e1e6-41cd-8deb-88ba590dc4db-20230725131234568.png\" alt=\"image.png\" /><br />\n 比如可以开启日志功能 (默认开启)，这样我们上传失败可以通过查看日志来具体查看是什么原因。<br />\n<img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690165502201-8d00361d-ced3-4ef4-af2b-bf204042c20b-20230725131243009.png\" alt=\"image.png\" /></p>\n<h2 id=\"设置typora实现自动上传\"><a class=\"anchor\" href=\"#设置typora实现自动上传\">#</a> 设置 Typora 实现自动上传</h2>\n<p>这一点有个前提，就是你有那种代理呦 hhh，否则，你可能会因为超时，而无法实现自动上传，只能手动将图片移到 PicGo 里面，然后再将 URL 复制到 Typora 里面啦～～</p>\n<ol>\n<li>首先，点击【文件】-&gt;【偏好设置】</li>\n<li>再次，选择【图像】。</li>\n<li>然后按照下图所示，插入图片时选择上传图片。然后在上传服务内选择 PicGo，并选择 PicGo.exe 的路径。</li>\n<li>这里的可以这样来去配置：</li>\n</ol>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/SoftLeaderGy/Pic@img/img/1690165658750-09f0b9d2-616f-4430-8645-24c839a8a371-20230725131250904.png\" alt=\"image.png\" /></p>\n<blockquote>\n<p>然后这样的话，你将你的截图直接粘贴到 Typora 里面，你的 Typora 会将链接直接通过 PicGo 上传到你 Github 服务器的仓库中。然后别人和你就都可以通过访问这个链接来实现图片共享啦。这样，你在发送你的文件的时候，图片就不会丢失了。</p>\n</blockquote>\n",
            "tags": [
                "图床"
            ]
        },
        {
            "id": "https://softleadergy.github.io/%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B9%8B%E5%9B%BD%E5%AF%86SM2/",
            "url": "https://softleadergy.github.io/%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%B9%8B%E5%9B%BD%E5%AF%86SM2/",
            "title": "加解密之国密SM2",
            "date_published": "2023-07-20T12:10:49.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>SM2 是国家密码管理局于 2010 年 12 月 17 日发布的椭圆曲线公钥密码算法。<br />\nSM2 算法和 RSA 算法都是公钥密码算法，SM2 算法是一种更先进安全的算法，在我们国家商用密码体系中被用来替换 RSA 算法。<br />\n随着密码技术和计算机技术的发展，目前常用的 1024 位 RSA 算法面临严重的安全威胁，我们国家密码管理部门经过研究，决定采用 SM2 椭圆曲线算法替换 RSA 算法。</p>\n</blockquote>\n<h1 id=\"sm2算法和rsa算法比较\"><a class=\"anchor\" href=\"#sm2算法和rsa算法比较\">#</a> SM2 算法和 RSA 算法比较</h1>\n<blockquote>\n<p>SM2 性能更优更安全：密码复杂度高、处理速度快、机器性能消耗更小<br />\n详细参考： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWNhYS5vcmcuY24vNjY3Lmh0bWw=\">https://www.ecaa.org.cn/667.html</span></p>\n</blockquote>\n<h1 id=\"后端代码实现\"><a class=\"anchor\" href=\"#后端代码实现\">#</a> 后端代码实现</h1>\n<h2 id=\"添加-sm2-依赖\"><a class=\"anchor\" href=\"#添加-sm2-依赖\">#</a> 添加 sm2 依赖</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.antherd<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sm-crypto<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"获取密钥对\"><a class=\"anchor\" href=\"#获取密钥对\">#</a> 获取密钥对</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSM2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 生成出来的密钥可无缝衔接 前端 js 加解密</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Keypair</span> keypair <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> privateKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 公钥</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> publicKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 私钥</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用公私钥进行加解密\"><a class=\"anchor\" href=\"#使用公私钥进行加解密\">#</a> 使用公私钥进行加解密</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSM2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 生成出来的密钥可无缝衔接 前端 js 加解密</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Keypair</span> keypair <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> privateKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 公钥</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> publicKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 私钥</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//cipherMode 1 - C1C3C2，0 - C1C2C3，默认为 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 使用公钥加密</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> doEncrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://softleadergy.github.io/\"</span><span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"加密： \\n\"</span> <span class=\"token operator\">+</span> doEncrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 私钥解密</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doDecrypt</span><span class=\"token punctuation\">(</span>doEncrypt<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密：\\n\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://p.ipic.vip/z9vu6m.png\" alt=\"image.png\" /></p>\n<h1 id=\"前端代码实现-vue\"><a class=\"anchor\" href=\"#前端代码实现-vue\">#</a> 前端代码实现 - vue</h1>\n<h2 id=\"安装依赖\"><a class=\"anchor\" href=\"#安装依赖\">#</a> 安装依赖</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> sm-crypto</pre></td></tr></table></figure><h2 id=\"获取密钥对-2\"><a class=\"anchor\" href=\"#获取密钥对-2\">#</a> 获取密钥对</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sm2 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sm-crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sm2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> keypair <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>publicKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span>publicKey <span class=\"token comment\">// 公钥</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>privateKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span>privateKey <span class=\"token comment\">// 私钥</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 自定义随机数，参数会直接透传给 jsbn 库的 BigInteger 构造器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 注意：开发者使用自定义随机数，需要自行确保传入的随机数符合密码学安全</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> keypair2 <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123123123123123'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> keypair3 <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> SecureRandom<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> verifyResult <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">verifyPublicKey</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 验证公钥</span></pre></td></tr></table></figure><h2 id=\"加密解密\"><a class=\"anchor\" href=\"#加密解密\">#</a> 加密解密</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里使用 Java 生成的密钥</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 后端生成密钥</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> privateKey <span class=\"token operator\">=</span> <span class=\"token string\">'a7a9846bbb015f8192bae355be4013d7b7b2bdcf56033b990d58bb5a7541f518'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> publicKey <span class=\"token operator\">=</span> <span class=\"token string\">'048ff6380b4db5c9fc9d80fc5e30bde049c12222c56b9085aa1f1c0b53cabd09e72dc5690110e5b57fc3ff88111d0d161723bcb6365c33cef70d3dbbdf32c7038f'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> sm2 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sm-crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sm2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> cipherMode <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 1 - C1C3C2，0 - C1C2C3，默认为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> encryptData <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">doEncrypt</span><span class=\"token punctuation\">(</span>msgString<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">,</span> cipherMode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加密结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> decryptData <span class=\"token operator\">=</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">doDecrypt</span><span class=\"token punctuation\">(</span>encryptData<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> cipherMode<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解密结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 指定输出类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//encryptData = sm2.doEncrypt (msgArray, publicKey, cipherMode) // 加密结果，输入数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//decryptData = sm2.doDecrypt (encryptData, privateKey, cipherMode, &#123;output: 'array'&#125;) // 解密结果，输出数组</span></pre></td></tr></table></figure><h2 id=\"最终封装\"><a class=\"anchor\" href=\"#最终封装\">#</a> 最终封装</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 前端加密</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param text</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @returns &#123;*&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">doEncrypt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加密结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 前端解密</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @param text</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @returns &#123;*&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> sm2<span class=\"token punctuation\">.</span><span class=\"token function\">doDecrypt</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 加密结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"签名验签\"><a class=\"anchor\" href=\"#签名验签\">#</a> 签名验签</h1>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取公私钥</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Keypair</span> keypair <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateKeyPairHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> privateKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPrivateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 公钥</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> publicKey <span class=\"token operator\">=</span> keypair<span class=\"token punctuation\">.</span><span class=\"token function\">getPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 私钥</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 需要加密的明文</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"https://softleadergy.github.io/\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> encrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doEncrypt</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用公钥加密密文为：\"</span><span class=\"token operator\">+</span> encrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> decrypt <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doDecrypt</span><span class=\"token punctuation\">(</span>encrypt<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用私钥解密明文为：\"</span><span class=\"token operator\">+</span> decrypt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 纯签名 + 生成椭圆曲线点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span> sigValueHex <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doSignature</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 签名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用私钥签名结果为：\"</span><span class=\"token operator\">+</span> sigValueHex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">boolean</span> verifyResult <span class=\"token operator\">=</span> <span class=\"token class-name\">Sm2</span><span class=\"token punctuation\">.</span><span class=\"token function\">doVerifySignature</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> sigValueHex<span class=\"token punctuation\">,</span> publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 验签结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用公钥验签结果为：\"</span><span class=\"token operator\">+</span> verifyResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用公钥加密密文为：<span class=\"token number\">89</span>bd07ef376bdc732f2d6430b64a144df14ce7f50fe6aea2d217b79dac1fcf4a950922ed7046a92702aa2f132504b19e8f35449f01a4dcbfb4d8a845e396d27d073b12cc89bb9db8d7bdd88e404be6d2b3d46527cc788012b210633500a3d7f00a7dc9d64d0a78a49ff58be351b03abe2d4cc30abbc5e2ec6fb297f10fa586</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用私钥解密明文为：https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>softleadergy<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用私钥签名结果为：<span class=\"token number\">5</span>eeacc471fe227f5679f94e7029ac1c0105420dbea0d8a6532ed03325207f8c191559f191edf05858d787bd3e1de331d179d93ae99dd4c9033a93295054fb5b8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>使用公钥验签结果为：<span class=\"token boolean\">true</span></pre></td></tr></table></figure><p><img data-src=\"https://p.ipic.vip/83baxj.jpg\" alt=\"image.png\" /></p>\n<blockquote>\n<p>签名验签、获取椭圆曲线点<br />\n详细请了解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0p1bmVBbmRHcmVlbi9zbS1jcnlwdG8jcmVhZG1l\">https://github.com/JuneAndGreen/sm-crypto#readme</span></p>\n</blockquote>\n",
            "tags": [
                "SM2"
            ]
        },
        {
            "id": "https://softleadergy.github.io/EasyExcel/",
            "url": "https://softleadergy.github.io/EasyExcel/",
            "title": "集成EasyExcel",
            "date_published": "2023-07-17T12:18:49.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYXN5ZXhjZWwub3BlbnNvdXJjZS5hbGliYWJhLmNvbS8=\">EasyExcel 官方文档 - 基于 Java 的 Excel 处理工具 | Easy Excel</span></p>\n<h1 id=\"搭建过程\"><a class=\"anchor\" href=\"#搭建过程\">#</a> 搭建过程</h1>\n<h2 id=\"导入pom依赖\"><a class=\"anchor\" href=\"#导入pom依赖\">#</a> 导入 pom 依赖</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>easyexcel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"web上传-下载\"><a class=\"anchor\" href=\"#web上传-下载\">#</a> web 上传、下载</h2>\n<h3 id=\"官方demo代码\"><a class=\"anchor\" href=\"#官方demo代码\">#</a> 官方 demo 代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 文件下载（失败了会返回一个有部分数据的 Excel）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* &lt;p></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 1. 创建 excel 对应的实体对象 参照 &#123;@link DownloadData&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* &lt;p></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* 2. 设置返回的 参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* &lt;p></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>* 3. 直接写，这里注意，finish 的时候会自动关闭 OutputStream, 当然你外面再关闭流问题不大</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"download\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 这里注意 有同学反应使用 swagger 会导致各种问题，请直接用浏览器或者用 postman</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 这里 URLEncoder.encode 可以防止中文乱码 当然和 easyexcel 没有关系</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"测试\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-disposition\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attachment;filename*=utf-8''\"</span> <span class=\"token operator\">+</span> fileName <span class=\"token operator\">+</span> <span class=\"token string\">\".xlsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">EasyExcel</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DownloadData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"模板\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doWrite</span><span class=\"token punctuation\">(</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>* 文件上传</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>* &lt;p>1. 创建 excel 对应的实体对象 参照 &#123;@link UploadData&#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>* &lt;p>2. 由于默认一行行的读取 excel，所以需要创建 excel 一行一行的回调监听器，参照 &#123;@link UploadDataListener&#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>* &lt;p>3. 直接读即可</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">EasyExcel</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UploadData</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UploadDataListener</span><span class=\"token punctuation\">(</span>uploadDAO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>easyexcel<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">.</span>web</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnalysisContext</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReadListener</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>excel<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ListUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson2<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSON</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * 模板的读取类</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * @author Jiaju Zhuang</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 有个很重要的点 DemoDataListener 不能被 spring 管理，要每次读取 excel 都要 new, 然后里面用到 spring 可以构造方法传进去</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UploadDataListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ReadListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadData</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        * 每隔 5 条存储数据库，实际使用中可以 100 条，然后清理 list ，方便内存回收</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">BATCH_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UploadData</span><span class=\"token punctuation\">></span></span> cachedDataList <span class=\"token operator\">=</span> <span class=\"token class-name\">ListUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayListWithExpectedSize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BATCH_COUNT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        * 假设这个是一个 DAO，当然有业务逻辑这个也可以是一个 service。当然如果不用存储这个对象没用。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">UploadDAO</span> uploadDAO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UploadDataListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 这里是 demo，所以随便 new 一个。实际使用如果到了 spring, 请使用下面的有参构造函数</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            uploadDAO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UploadDAO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        * 如果使用了 spring, 请使用这个构造方法。每次创建 Listener 的时候需要把 spring 管理的类传进来</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        * @param uploadDAO</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UploadDataListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UploadDAO</span> uploadDAO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadDAO <span class=\"token operator\">=</span> uploadDAO<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        * 这个每一条数据解析都会来调用</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        *</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        * @param data    one row value. It is same as &#123;@link AnalysisContext#readRowHolder ()&#125;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        * @param context</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UploadData</span> data<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解析到一条数据:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 达到 BATCH_COUNT 了，需要去存储一次数据库，防止数据几万条数据在内存，容易 OOM</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">BATCH_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token comment\">// 存储完成清理 list</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                cachedDataList <span class=\"token operator\">=</span> <span class=\"token class-name\">ListUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayListWithExpectedSize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BATCH_COUNT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        * 所有数据解析完成了 都会来调用</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        *</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        * @param context</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAfterAllAnalysed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有数据解析完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        * 加上存储数据库</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;条数据，开始存储数据库！\"</span><span class=\"token punctuation\">,</span> cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            uploadDAO<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>cachedDataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"存储数据库成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>官方完整示例代码</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvZWFzeWV4Y2VsL2Jsb2IvbWFzdGVyL2Vhc3lleGNlbC10ZXN0L3NyYy90ZXN0L2phdmEvY29tL2FsaWJhYmEvZWFzeWV4Y2VsL3Rlc3QvZGVtby93ZWIvV2ViVGVzdC5qYXZh\">easyexcel/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java at master · alibaba/easyexcel</span></p>\n<h3 id=\"项目实战\"><a class=\"anchor\" href=\"#项目实战\">#</a> 项目实战</h3>\n<h4 id=\"上传导入\"><a class=\"anchor\" href=\"#上传导入\">#</a> 上传导入</h4>\n<ol>\n<li>导入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>easyexcel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.3.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>创建 BusinessLinkUploadListener 类，且实现 ReadListener&lt;BusinessLinkDTO&gt;</li>\n<li>有个很重要的点 BusinessLinkUploadListener 不能被 spring 管理，要每次读取 excel 都要 new, 然后里面用到 spring 可以构造方法传进去，所以使用有参构造</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 如果使用了 spring, 请使用这个构造方法。每次创建 Listener 的时候需要把 spring 管理的类传进来</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param businessLinkService</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BusinessLinkUploadListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessLinkService</span> businessLinkService<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>businessLinkService <span class=\"token operator\">=</span> businessLinkService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 响应体</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>设置多少条数据之后执行一次存储</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 每隔 100 条存储数据库，然后清理 list ，方便内存回收</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">BATCH_COUNT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p>监听器方法</p>\n<ol>\n<li>void invoke (BusinessLinkDTO businessLinkDTO, AnalysisContext context) 方法（这个每一条数据解析都会来调用）</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个每一条数据解析都会来调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param businessLinkDTO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param context</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessLinkDTO</span> businessLinkDTO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解析到一条数据:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>businessLinkDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>businessLinkDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 达到 BATCH_COUNT 了，需要去存储一次数据库，防止数据几万条数据在内存，容易 OOM</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token constant\">BATCH_COUNT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 存储完成清理 list</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cachedDataList <span class=\"token operator\">=</span> <span class=\"token class-name\">ListUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">newArrayListWithExpectedSize</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BATCH_COUNT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>void doAfterAllAnalysed (AnalysisContext context) 方法 （所有数据解析完成了 都会来调用）</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 所有数据解析完成了 都会来调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param context</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doAfterAllAnalysed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnalysisContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"所有数据解析完成！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 重置失败数据 list</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    failList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>业务处理方法（在 invoke 方法处理时进行做业务数据处理）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 保存数据库</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@SneakyThrows</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;条数据，开始存储数据库！\"</span><span class=\"token punctuation\">,</span> cachedDataList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessLinkDTO</span> businessLinkDTO <span class=\"token operator\">:</span> cachedDataList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token function\">checkParam</span><span class=\"token punctuation\">(</span>businessLinkDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">UploadFailBusinessLinkDTO</span> dto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UploadFailBusinessLinkDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>businessLinkDTO<span class=\"token punctuation\">,</span>dto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            dto<span class=\"token punctuation\">.</span><span class=\"token function\">setFailMsg</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            failList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        businessLinkService<span class=\"token punctuation\">.</span><span class=\"token function\">saveBusinessLink</span><span class=\"token punctuation\">(</span>businessLinkDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>failList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">EasyExcel</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UploadFailBusinessLinkDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"业务链接\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">doWrite</span><span class=\"token punctuation\">(</span>failList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"存储数据库成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Controller 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 导入</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param file</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @throws IOException</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/upload\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">,</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">EasyExcel</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            file<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">BusinessLinkDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上传数据实体类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessLinkUploadListener</span><span class=\"token punctuation\">(</span>businessLinkService<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">doRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"下载导出\"><a class=\"anchor\" href=\"#下载导出\">#</a> 下载导出</h4>\n<ol>\n<li>实体代码</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Description: 业务链接 DTO</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author: Guo.Yang</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Date: 2023/07/03/09:30</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"business_link_b\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BusinessLinkDTO</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 主键</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelIgnore</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 业务名称</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"业务名称\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"业务名称不可未空！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> businessName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 业务链接</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"业务链接\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@NotBlank</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"业务链接不可未空！\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> businessUrl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 类型</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"类型\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 备注</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"备注\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> remark<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 创建时间</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"创建时间\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> crteTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 修改时间</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"修改时间\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> updtTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * 有效标识</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExcelProperty</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"有效标识\"</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> enableFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>Controller 代码</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 导出数据、导出模版</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @param response</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @param type</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @throws IOException</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//type 为 data 时，进行所有数据的查询，并进行导出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//type 不为 data 时，就创建一个空的 List 进行导出也就是所谓的下载模版</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/download/&#123;type&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isDate <span class=\"token operator\">=</span> <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span> dataFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyyMMddHHmmss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>dataFormat <span class=\"token operator\">+</span> <span class=\"token string\">\"_业务链接\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> isDate<span class=\"token operator\">?</span> <span class=\"token string\">\"导出\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"模版\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-disposition\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"attachment;filename*=utf-8''\"</span> <span class=\"token operator\">+</span> fileName <span class=\"token operator\">+</span> <span class=\"token string\">\".xlsx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">EasyExcel</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BusinessLinkDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">sheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"业务链接\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">doWrite</span><span class=\"token punctuation\">(</span>isDate<span class=\"token operator\">?</span> businessLinkService<span class=\"token punctuation\">.</span><span class=\"token function\">queryBusinessLinkList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessLinkDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BusinessLinkDTO</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h3>\n<blockquote>\n<p>导出的时候实体最好不要继承，因为 A.class extends B.class 后 ，导出的时候，会将 A 类的字段作为导出表格的第一列，使用 @ExcelProperty (value = &quot;业务名称&quot;,index = 0) 注解标注列顺序的时候在两个列直接，也会失效，当然在一个类内 各个字段的排序是生效的。</p>\n</blockquote>\n<hr />\n",
            "tags": [
                "EasyExcel"
            ]
        },
        {
            "id": "https://softleadergy.github.io/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6/",
            "url": "https://softleadergy.github.io/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6/",
            "title": "OAuth2密码模式探究",
            "date_published": "2023-06-19T13:01:49.000Z",
            "content_html": "<h1 id=\"一-认证会用到的相关请求\"><a class=\"anchor\" href=\"#一-认证会用到的相关请求\">#</a> 一、认证会用到的相关请求</h1>\n<h2 id=\"11-获取access_token请求oauthtoken\"><a class=\"anchor\" href=\"#11-获取access_token请求oauthtoken\">#</a> 1.1、获取 access_token 请求（/oauth/token）</h2>\n<ul>\n<li>请求所需参数：client_id、client_secret、grant_type、username、password</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost/oauth/token?client_id=demoClientId&amp;client_secret=demoClientSecret&amp;grant_type=password&amp;username=demoUser&amp;password=50575tyL86xp29O380t1</span></span></pre></td></tr></table></figure><h2 id=\"12-检查头肯是否有效请求oauthcheck_token\"><a class=\"anchor\" href=\"#12-检查头肯是否有效请求oauthcheck_token\">#</a> 1.2、检查头肯是否有效请求（/oauth/check_token）</h2>\n<ul>\n<li>请求所需参数：token</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost/oauth/check_token?token=f57ce129-2d4d-4bd7-1111-f31ccc69d4d1</span></span></pre></td></tr></table></figure><h2 id=\"13-刷新token请求oauthtoken\"><a class=\"anchor\" href=\"#13-刷新token请求oauthtoken\">#</a> 1.3、刷新 token 请求（/oauth/token）</h2>\n<ul>\n<li>请求所需参数：grant_type、refresh_token、client_id、client_secret 其中 grant_type 为固定值：grant_type=refresh_token</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost/oauth/token?grant_type=refresh_token&amp;refresh_token=fbde81ee-f419-42b1-1234-9191f1f95be9&amp;client_id=demoClientId&amp;client_secret=demoClientSecret</span></span></pre></td></tr></table></figure><h1 id=\"二-工作原理\"><a class=\"anchor\" href=\"#二-工作原理\">#</a> 二、工作原理</h1>\n<h2 id=\"21-结构总结\"><a class=\"anchor\" href=\"#21-结构总结\">#</a> 2.1、结构总结</h2>\n<blockquote>\n<p>Spring Security 所解决的问题就是安全访问控制，而安全访问控制功能其实就是对所有进入系统的请求进行拦截， 校验每个请求是否能够访问它所期望的资源。我们可以通过 Filter 或 AOP 等技术来实现，Spring Security 对 Web 资源的保护是靠 Filter 实现的，所以从这个 Filter 来入手，逐步深入 Spring Security 原理。<br />\n当初始化 Spring Security 时，会创建一个名为 SpringSecurityFilterChain 的 Servlet 过滤器，类型为 org.springframework.security.web.FilterChainProxy，它实现了 javax.servlet.Filter，因此外部的请求会经过此 类，下图是 Spring Security 过虑器链结构图：</p>\n</blockquote>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668753467277-f793552d-3998-4d22-8e4e-3fe5941d94c5.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668753520154-ebfce956-2fa9-46a8-aef2-a974c386ebcf.png\" alt=\"image.png\" /><br />\nFilterChainProxy 是一个代理，真正起作用的是 FilterChainProxy 中 SecurityFilterChain 所包含的各个 Filter，同时 这些 Filter 作为 Bean 被 Spring 管理，它们是 Spring Security 核心，各有各的职责，但他们并不直接处理用户的认 证，也不直接处理用户的授权，而是把它们交给了认证管理器（AuthenticationManager）和决策管理器 （AccessDecisionManager  进行处理，下图是 FilterChainProxy 相关类的 UML 图示。<br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668754068624-1ac1d107-c0d4-40f0-b5d3-4dd55d58beeb.png\" alt=\"image.png\" /><br />\nspring Security 功能的实现主要是由一系列过滤器链相互配合完成。<br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668754156632-863aa0d9-a5bd-48b9-a1ca-ec7f2e76bf33.png\" alt=\"image.png\" /><br />\n 下面介绍过滤器链中主要的几个过滤器及其作用</p>\n<ul>\n<li>SecurityContextPersistenceFilter 这个 Filter 是整个拦截过程的入口和出口（也就是第一个和最后一个拦截 器），会在请求开始时从配置好的 SecurityContextRepository 中获取 SecurityContext，然后把它设置给 SecurityContextHolder。在请求完成后将 SecurityContextHolder 持有的 SecurityContext 再保存到配置好 的 SecurityContextRepository，同时清除 securityContextHolder 所持有的 SecurityContext；</li>\n<li>UsernamePasswordAuthenticationFilter 用于处理来自表单提交的认证。该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的 AuthenticationSuccessHandler 和 AuthenticationFailureHandler，这些都可以根据需求做相关改变；</li>\n<li>FilterSecurityInterceptor 是用于保护 web 资源的，使用 AccessDecisionManager 对当前用户进行授权访问，前面已经详细介绍过了；</li>\n<li>ExceptionTranslationFilter 能够捕获来自 FilterChain 所有的异常，并进行处理。但是它只会处理两类异常： AuthenticationException 和 AccessDeniedException，其它的异常它会继续抛出。</li>\n</ul>\n<h2 id=\"22-认证流程\"><a class=\"anchor\" href=\"#22-认证流程\">#</a> 2.2、认证流程</h2>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668754408721-6bef794a-d35c-45aa-87d7-495699d4f612.png\" alt=\"image.png\" /><br />\n 让我们仔细分析认证过程：</p>\n<ol>\n<li>用户提交用户名、密码被 SecurityFilterChain 中的 UsernamePasswordAuthenticationFilter 过滤器获取到， 封装为请求 Authentication，通常情况下是 UsernamePasswordAuthenticationToken 这个实现类。</li>\n<li>然后过滤器将 Authentication 提交至认证管理器（AuthenticationManager）进行认证</li>\n<li>认证成功后， AuthenticationManager 身份管理器返回一个被填充满了信息的（包括上面提到的权限信息， 身份信息，细节信息，但密码通常会被移除） Authentication 实例。</li>\n<li>SecurityContextHolder 安全上下文容器将第 3 步填充了信息的 Authentication ，通过 SecurityContextHolder.getContext ().setAuthentication (…) 方法，设置到其中。 可以看出 AuthenticationManager 接口（认证管理器）是认证相关的核心接口，也是发起认证的出发点，它的实现类为 ProviderManager。而 Spring Security 支持多种认证方式，因此 ProviderManager 维护着一个 List 列表，存放多种认证方式，最终实际的认证工作是由 AuthenticationProvider 完成的。咱们知道 web 表单的对应的 AuthenticationProvider 实现类为 DaoAuthenticationProvider，它的内部又维护着一个 UserDetailsService 负责 UserDetails 的获取。最终 AuthenticationProvider 将 UserDetails 填充至 Authentication。 认证核心组件的大体关系如下：</li>\n</ol>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668758671512-f9051627-947f-495c-9af3-986cb0e7d364.png\" alt=\"image.png\" /></p>\n<h3 id=\"authenticationprovider\"><a class=\"anchor\" href=\"#authenticationprovider\">#</a> AuthenticationProvider</h3>\n<p>通过前面的 Spring Security 认证流程我们得知，认证管理器（AuthenticationManager）委托 AuthenticationProvider 完成认证工作。 AuthenticationProvider 是一个接口，定义如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AuthenticationProvider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Authentication</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authentication</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>authenticate () 方法定义了认证的实现过程，它的参数是一个 Authentication，里面包含了登录用户所提交的用户名、密码等。而返回值也是一个 Authentication，这个 Authentication 则是在认证成功后，将用户的权限及其他信 息重新组装后生成。</li>\n<li>Spring Security 中维护着一个 List 列表，存放多种认证方式，不同的认证方式使用不同的 AuthenticationProvider。如使用用户名密码登录时，使用 AuthenticationProvider1，短信登录时使用 AuthenticationProvider2 等等这样的例子很多。</li>\n<li>每个 AuthenticationProvider 需要实现 supports（）方法来表明自己支持的认证方式，如我们使用表单方式认证， 在提交请求时 Spring Security 会生成 UsernamePasswordAuthenticationToken，它是一个 Authentication，里面 封装着用户提交的用户名、密码信息。而对应的，哪个 AuthenticationProvider 来处理它？</li>\n</ul>\n<p>我们在 DaoAuthenticationProvider 的基类 AbstractUserDetailsAuthenticationProvider 发现以下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>也就是说当 web 表单提交用户名密码时，Spring Security 由 DaoAuthenticationProvider 处理。<br />\n最后，我们来看一下 Authentication (认证信息) 的结构，它是一个接口，我们之前提到的 UsernamePasswordAuthenticationToken 就是它的实现之一：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Authentication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Principal</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">getDetails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668759557994-6e33ecb3-c086-4e53-8c99-34b173ff7d8d.png\" alt=\"image.png\" /></p>\n<ol>\n<li>Authentication 是 spring security 包中的接口，直接继承自 Principal 类，而 Principal 是位于 java.security 包中的。它是表示着一个抽象主体身份，任何主体都有一个名称，因此包含一个 getName () 方法。</li>\n<li>getAuthorities ()，权限信息列表，默认是 GrantedAuthority 接口的一些实现类，通常是代表权限信息的一系 列字符串。</li>\n<li>getCredentials ()，凭证信息，用户输入的密码字符串，在认证过后通常会被移除，用于保障安全。</li>\n<li>getDetails ()，细节信息，web 应用中的实现接口通常为 WebAuthenticationDetails，它记录了访问者的 ip 地 址和 sessionId 的值。</li>\n<li>getPrincipal ()，身份信息，大部分情况下返回的是 UserDetails 接口的实现类，UserDetails 代表用户的详细 信息，那从 Authentication 中取出来的 UserDetails 就是当前登录用户信息，它也是框架中的常用接口之一。</li>\n</ol>\n<h3 id=\"userdetailsservice\"><a class=\"anchor\" href=\"#userdetailsservice\">#</a> UserDetailsService</h3>\n<p>现在咱们现在知道 DaoAuthenticationProvider 处理了 web 表单的认证逻辑，认证成功后既得到一个 Authentication (UsernamePasswordAuthenticationToken 实现)，里面包含了身份信息（Principal）。这个身份 信息就是一个 Object ，大多数情况下它可以被强转为 UserDetails 对象。</p>\n<p>DaoAuthenticationProvider 中包含了一个 UserDetailsService 实例，它负责根据用户名提取用户信息 UserDetails (包含密码)，而后 DaoAuthenticationProvider 会去对比 UserDetailsService 提取的用户密码与用户提交 的密码是否匹配作为认证成功的关键依据，因此可以通过将自定义的 UserDetailsService 公开为 spring bean 来定义自定义身份验证</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很多人把 DaoAuthenticationProvider 和 UserDetailsService 的职责搞混淆，其实 UserDetailsService 只负责从特定 的地方（通常是数据库）加载用户信息，仅此而已。而 DaoAuthenticationProvider 的职责更大，它完成完整的认证流程，同时会把 UserDetails 填充至 Authentication。</p>\n<h3 id=\"userdetails\"><a class=\"anchor\" href=\"#userdetails\">#</a> UserDetails</h3>\n<p>上面一直提到 UserDetails 是用户信息，咱们看一下它的真面目：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCredentialsNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>它和 Authentication 接口很类似，比如它们都拥有 username，authorities。Authentication 的 getCredentials () 与 UserDetails 中的 getPassword () 需要被区分对待，前者是用户提交的密码凭证，后者是用户实际存储的密码，认证 其实就是对这两者的比对。Authentication 中的 getAuthorities () 实际是由 UserDetails 的 getAuthorities () 传递而形成的。还记得 Authentication 接口中的 getDetails () 方法吗？其中的 UserDetails 用户详细信息便是经过了 AuthenticationProvider 认证之后被填充的。<br />\n通过实现 UserDetailsService 和 UserDetails，我们可以完成对用户信息获取方式以及用户信息字段的扩展。<br />\nSpring Security 提供的 InMemoryUserDetailsManager (内存认证)，JdbcUserDetailsManager (jdbc 认证) 就是 UserDetailsService 的实现类，主要区别无非就是从内存还是从数据库加载用户</p>\n<h2 id=\"23-获取token的主要流程\"><a class=\"anchor\" href=\"#23-获取token的主要流程\">#</a> 2.3、获取 token 的主要流程</h2>\n<ol>\n<li>用户发起获取 token 的请求。</li>\n<li>过滤器会验证 path 是否是认证的请求 /oauth/token，如果为 false，则直接返回没有后续操作。</li>\n<li>过滤器通过 clientId 查询生成一个 Authentication 对象。</li>\n<li>然后会通过 username 和生成的 Authentication 对象生成一个 UserDetails 对象，并检查用户是否存在。</li>\n<li>以上全部通过会进入地址 /oauth/token，即 TokenEndpoint 的 postAccessToken 方法中。</li>\n<li>postAccessToken 方法中会验证 Scope，然后验证是否是 refreshToken 请求等。</li>\n<li>之后调用 AbstractTokenGranter 中的 grant 方法。</li>\n<li>grant 方法中调用 AbstractUserDetailsAuthenticationProvider 的 authenticate 方法，通过 username 和 Authentication 对象来检索用户是否存在。</li>\n<li>然后通过 DefaultTokenServices 类从 tokenStore 中获取 OAuth2AccessToken 对象。</li>\n<li>然后将 OAuth2AccessToken 对象包装进响应流返回。</li>\n</ol>\n<h3 id=\"231-代码执行流程\"><a class=\"anchor\" href=\"#231-代码执行流程\">#</a> 2.3.1、代码执行流程：</h3>\n<blockquote>\n<p>TokenEndpoint.postAccessToken () ---&gt;  AbstractTokenGranter.grant () ---&gt;  AbstractUserDetailsAuthenticationProvider.authenticate ()  ---&gt;  DefaultTokenServices 类从 tokenStore 中获取 OAuth2AccessToken 对象  ---&gt;  OAuth2AccessToken 对象包装进响应流返回</p>\n</blockquote>\n<h3 id=\"232-代码截图执行流程\"><a class=\"anchor\" href=\"#232-代码截图执行流程\">#</a> 2.3.2、代码截图执行流程</h3>\n<h4 id=\"解析-客户端凭证值的格式为basic空格-client_idclient_secret经过base64加密后的值\"><a class=\"anchor\" href=\"#解析-客户端凭证值的格式为basic空格-client_idclient_secret经过base64加密后的值\">#</a> 解析 客户端凭证，值的格式为 Basic 空格 + client_id:client_secret 经过 Base64 加密后的值</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668761342232-ad1dc737-093e-4475-a81f-88e8fb491b4e.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668761695470-392407be-0448-452c-a464-11eb2546040f.png\" alt=\"image.png\" /></p>\n<h4 id=\"1一个比较重要的过滤器\"><a class=\"anchor\" href=\"#1一个比较重要的过滤器\">#</a> ①一个比较重要的过滤器</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668762169094-a93bf6b6-fdc0-4f50-80d8-5f055d282f0f.png\" alt=\"image.png\" /></p>\n<h4 id=\"2此处是1中的attemptauthentication方法\"><a class=\"anchor\" href=\"#2此处是1中的attemptauthentication方法\">#</a> ②此处是①中的 attemptAuthentication 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668762462925-c53ccc77-b78e-49a7-badb-56541de14059.png\" alt=\"image.png\" /></p>\n<h4 id=\"3此处是2中调用的authenticate方法\"><a class=\"anchor\" href=\"#3此处是2中调用的authenticate方法\">#</a> ③此处是②中调用的 authenticate 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668762798314-a6639f98-3a2b-4e71-b55d-a893672e835d.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668763023424-ccd05193-0570-4917-8f87-a395359f4a9c.png\" alt=\"image.png\" /></p>\n<h4 id=\"4-此处是3中调用的abstractuserdetailsauthenticationprovider类的authenticate方法\"><a class=\"anchor\" href=\"#4-此处是3中调用的abstractuserdetailsauthenticationprovider类的authenticate方法\">#</a> ④ 此处是③中调用的 AbstractUserDetailsAuthenticationProvider 类的 authenticate 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668763206292-f4dcd5f2-e54c-413e-a3ba-8fe0bd3fc9d8.png\" alt=\"image.png\" /></p>\n<h4 id=\"5-此处是4中调用的daoauthenticationprovider类的retrieveuser方法\"><a class=\"anchor\" href=\"#5-此处是4中调用的daoauthenticationprovider类的retrieveuser方法\">#</a> ⑤ 此处是④中调用的 DaoAuthenticationProvider 类的 retrieveUser 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668763841953-4c10e52d-2b97-411e-919f-0f3cb5761447.png\" alt=\"image.png\" /></p>\n<h4 id=\"6此处为5中调用的clientdetailsuserdetailsservice类的loaduserbyusername方法执行完后接着返回执行4之后的方法\"><a class=\"anchor\" href=\"#6此处为5中调用的clientdetailsuserdetailsservice类的loaduserbyusername方法执行完后接着返回执行4之后的方法\">#</a> ⑥此处为⑤中调用的 ClientDetailsUserDetailsService 类的 loadUserByUsername 方法，执行完后接着返回执行④之后的方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668763995970-26681491-a9eb-4ca3-8874-293d5a1e3a82.png\" alt=\"image.png\" /></p>\n<h4 id=\"7此处为4中调用的daoauthenticationprovider类的additionalauthenticationchecks方法此处执行完则主要过滤器执行完毕后续会进入oauthtoken映射的方法\"><a class=\"anchor\" href=\"#7此处为4中调用的daoauthenticationprovider类的additionalauthenticationchecks方法此处执行完则主要过滤器执行完毕后续会进入oauthtoken映射的方法\">#</a> ⑦此处为④中调用的 DaoAuthenticationProvider 类的 additionalAuthenticationChecks 方法，此处执行完则主要过滤器执行完毕，后续会进入 /oauth/token 映射的方法。</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668764674222-75cb23a4-47a5-45ec-8d9a-e3c628a27ec2.png\" alt=\"image.png\" /></p>\n<h4 id=\"8此处进入oauthtoken映射的tokenendpoint类的postaccesstoken方法\"><a class=\"anchor\" href=\"#8此处进入oauthtoken映射的tokenendpoint类的postaccesstoken方法\">#</a> ⑧此处进入 /oauth/token 映射的 TokenEndpoint 类的 postAccessToken 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668764793917-57af320d-0dcc-4fee-bcd7-adb52d3abcf7.png\" alt=\"image.png\" /><br />\npostAccessToken 方法<br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668766406035-797c2c03-9e07-419d-8a0d-1bf1d00b4bca.png\" alt=\"image.png\" /></p>\n<h4 id=\"9此处为8中调用的abstracttokengranter类的grant方法\"><a class=\"anchor\" href=\"#9此处为8中调用的abstracttokengranter类的grant方法\">#</a> ⑨此处为⑧中调用的 AbstractTokenGranter 类的 grant 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668766466494-5d387673-f8b1-449c-9303-d762d8689c50.png\" alt=\"image.png\" /></p>\n<h4 id=\"10此处为9中调用的resourceownerpasswordtokengranter类中的getoauth2authentication方法\"><a class=\"anchor\" href=\"#10此处为9中调用的resourceownerpasswordtokengranter类中的getoauth2authentication方法\">#</a> ⑩此处为⑨中调用的 ResourceOwnerPasswordTokenGranter 类中的 getOAuth2Authentication 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668766606138-adff4a7e-c6a2-4ed8-b21f-364bfd057dae.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668766716340-85ba3598-f28d-400f-91ed-f29850ccdcc7.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668766954447-1e9bc70b-e749-4393-920c-f299e059442d.png\" alt=\"image.png\" /></p>\n<h4 id=\"101-此处为10中调用的自定义的customuserauthenticationprovider类中的authenticate方法此处校验用户密码是否正确此处执行完则返回9执行后续方法\"><a class=\"anchor\" href=\"#101-此处为10中调用的自定义的customuserauthenticationprovider类中的authenticate方法此处校验用户密码是否正确此处执行完则返回9执行后续方法\">#</a> ⑩① 此处为⑩中调用的自定义的 CustomUserAuthenticationProvider 类中的 authenticate 方法，此处校验用户密码是否正确，此处执行完则返回⑨执行后续方法。</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668767145161-44995f9d-7a02-4d8c-a601-2bdf7b2f249c.png\" alt=\"image.png\" /></p>\n<h4 id=\"102-此处为9中调用的defaulttokenservices中的createaccesstoken方法\"><a class=\"anchor\" href=\"#102-此处为9中调用的defaulttokenservices中的createaccesstoken方法\">#</a> ⑩② 此处为⑨中调用的 DefaultTokenServices 中的 createAccessToken 方法</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668767530308-3ed24074-1b4c-4cb5-98c8-2232080e9f94.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668767715846-e05a5345-6a8c-4a54-9330-cce566d76775.png\" alt=\"image.png\" /></p>\n<h4 id=\"103此处为12中调用的redistokenstore中的getaccesstoken方法等此处执行完则一直向上返回到8中执行后续方法\"><a class=\"anchor\" href=\"#103此处为12中调用的redistokenstore中的getaccesstoken方法等此处执行完则一直向上返回到8中执行后续方法\">#</a> ⑩③此处为 12 中调用的 RedisTokenStore 中的 getAccessToken 方法等，此处执行完，则一直向上返回到⑧中执行后续方法。</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668767478392-0f5160f0-6de7-43fe-bb4a-12596cbd7c07.png\" alt=\"image.png\" /></p>\n<h4 id=\"104此处为8中获取到token后需要包装返回流操作\"><a class=\"anchor\" href=\"#104此处为8中获取到token后需要包装返回流操作\">#</a> ⑩④此处为⑧中获取到 token 后需要包装返回流操作</h4>\n<p><img data-src=\"../images/SecurityOauth2%E5%AF%86%E7%A0%81%E6%A8%A1%E5%BC%8F_oauth_token%E6%8E%A2%E7%A9%B6_img/1668767818536-a816c39b-8da8-4d4c-9f0f-78c318621371.png\" alt=\"image.png\" /></p>\n",
            "tags": [
                "OAuth2、认证"
            ]
        },
        {
            "id": "https://softleadergy.github.io/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5/",
            "url": "https://softleadergy.github.io/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5/",
            "title": "CPU飙升排查",
            "date_published": "2023-06-17T06:18:49.000Z",
            "content_html": "<h1 id=\"cpu飙升\"><a class=\"anchor\" href=\"#cpu飙升\">#</a> CPU 飙升</h1>\n<p>线上资源 cpu 飙升是我们工作中常见的问题，一篇文章搞定排查方法</p>\n<h2 id=\"一-问题复现\"><a class=\"anchor\" href=\"#一-问题复现\">#</a> 一、问题复现</h2>\n<ul>\n<li>\n<p>现在我有两个接口，代码如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CPUCheck</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">helloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/run\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>代码很简单 接口 1“/hello” 返回 “hello World”，接口 2“/run” 进入死循环，这样就保证了访问接口 2cpu 升高。</p>\n</li>\n</ul>\n<h2 id=\"二-测试\"><a class=\"anchor\" href=\"#二-测试\">#</a> 二、测试</h2>\n<ol>\n<li>\n<p>我们将项目打包部署在服务器上，并启动</p>\n<p><img data-src=\"../images/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5_img/view.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>测试接口</p>\n<pre><code class=\"language-curl\">curl http://localhost:9901/thing-test/hello\n</code></pre>\n</li>\n</ol>\n<p><img data-src=\"../images/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5_img/bVc7E9o-20230617142818168.png\" alt=\"image.png\" /></p>\n<h2 id=\"三-排查\"><a class=\"anchor\" href=\"#三-排查\">#</a> 三、排查</h2>\n<ol>\n<li>\n<p>通过 <code>top</code>  命令可以查看到有一个 java 进程占用 cpu 资源异常</p>\n</li>\n<li>\n<p>获取 pid 为 <code>32306</code></p>\n</li>\n<li>\n<p>通过命令查询 <code>tid</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：ps <span class=\"token parameter variable\">-mp</span> 【pid】 <span class=\"token parameter variable\">-o</span> THREAD,tid,time</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>实例：ps <span class=\"token parameter variable\">-mp</span> <span class=\"token number\">32306</span> <span class=\"token parameter variable\">-o</span> THREAD,tid,time</pre></td></tr></table></figure></li>\n</ol>\n<p><img data-src=\"../images/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5_img/bVc7Fau.png\" alt=\"image.png\" /></p>\n<ol start=\"4\">\n<li>\n<p>可以看到引起 cpu 异常的 tid 是 <code>32327</code></p>\n</li>\n<li>\n<p>因为现在的 tid <code>32327</code>  是十进制的，需要将其转化为十六进制</p>\n<pre><code class=\"language-she\">命令：printf &quot;%x\\n&quot; 【十进制tid】\n实例：printf &quot;%x\\n&quot; 32327\n</code></pre>\n<p>&lt;img src=&quot;../images/CPU 飙升排查_img/bVc7FaD.png&quot; alt=&quot;image.png&quot; style=&quot;zoom: 150%;&quot; /&gt;</p>\n</li>\n<li>\n<p>根据 pid 和 tid 查询导致 cpu 飙升的代码</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令：jstack 【10进制pid】 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 【16进制tid】 <span class=\"token parameter variable\">-A</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>实例：jstack <span class=\"token number\">32306</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> 7e47 <span class=\"token parameter variable\">-A</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><p><img data-src=\"../images/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5_img/bVc7Fby-20230617143253173.png\" alt=\"image.png\" /></p>\n</li>\n</ol>\n<p><img data-src=\"../images/CPU%E9%A3%99%E5%8D%87%E6%8E%92%E6%9F%A5_img/bVc7FbL.png\" alt=\"image.png\" /></p>\n<hr />\n<p>end....</p>\n",
            "tags": [
                "cpu、shell"
            ]
        },
        {
            "id": "https://softleadergy.github.io/xxl-job%E6%90%AD%E5%BB%BA/",
            "url": "https://softleadergy.github.io/xxl-job%E6%90%AD%E5%BB%BA/",
            "title": "xxl-job搭建",
            "date_published": "2023-06-15T05:38:11.000Z",
            "content_html": "<h1 id=\"一-搭建过程\"><a class=\"anchor\" href=\"#一-搭建过程\">#</a> 一、搭建过程</h1>\n<h2 id=\"11-官网\"><a class=\"anchor\" href=\"#11-官网\">#</a> 1.1、官网</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHV4dWVsaS5jb20veHhsLWpvYi8=\">分布式任务调度平台 XXL-JOB</span></p>\n<h2 id=\"12-代码结构\"><a class=\"anchor\" href=\"#12-代码结构\">#</a> 1.2、代码结构</h2>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686709081210-11703652-d441-4991-9a52-e9bf32a45161.png\" alt=\"1686709081210-11703652-d441-4991-9a52-e9bf32a45161\" /></p>\n<h2 id=\"13-初始化数据库\"><a class=\"anchor\" href=\"#13-初始化数据库\">#</a> 1.3、初始化数据库</h2>\n<ul>\n<li>初始化脚本在上面源码目录的  /doc/db/tables_xxl_job.sql ，将此脚本在 MySQL 数据库中执行一遍。</li>\n<li>执行完毕，会在 MySQL 数据库中生成如下 8 张表：</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686647902677-0026439c-9861-4a3d-82a0-a86bd7d789d5.png\" alt=\"image.png\" /></p>\n<h2 id=\"14-配置调度中心admin\"><a class=\"anchor\" href=\"#14-配置调度中心admin\">#</a> 1.4、配置调度中心（admin）</h2>\n<p>调度中心就是源码中的 xxl-job-admin 工程，我们需要将其配置成自己需要的调度中心，通过该工程我们能够以图形化的方式统一管理任务调度平台上调度任务，负责触发调度执行</p>\n<h3 id=\"141-修改调度中心配置文件\"><a class=\"anchor\" href=\"#141-修改调度中心配置文件\">#</a> 1.4.1、修改调度中心配置文件</h3>\n<p>文件地址：/xxl-job/xxl-job-admin/src/main/resources/xxl-job-admin.properties<br />\n 配置文件说明：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### 1、调度中心项目的端口号以及访问路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8080</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">server.context-path</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/xxl-job-admin</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">### 2、配置静态文件的前缀</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">spring.mvc.static-path-pattern</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/static/**</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">spring.resources.static-locations</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">classpath:/static/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">### 3、配置模板文件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">spring.freemarker.templateLoaderPath</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">classpath:/templates/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">spring.freemarker.suffix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">.ftl</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">spring.freemarker.charset</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">UTF-8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">spring.freemarker.request-context-attribute</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">request</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">spring.freemarker.settings.number_format</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0.##########</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">### 4、配置 mybatis 的 mapper 文件地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">mybatis.mapper-locations</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">classpath:/mybatis-mapper/*Mapper.xml</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">### 5、配置数据库的地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root123456</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.driver-class-name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.cj.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.tomcat.jdbc.pool.DataSource</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.tomcat.max-wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.tomcat.max-active</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.tomcat.test-on-borrow</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.tomcat.validation-query</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SELECT 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.tomcat.validation-interval</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30000</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">### 6、配置报警邮箱</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key attr-name\">spring.mail.host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">smtp.qq.com</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key attr-name\">spring.mail.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">25</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key attr-name\">spring.mail.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx@qq.com</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key attr-name\">spring.mail.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxx</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token key attr-name\">spring.mail.properties.mail.smtp.auth</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token key attr-name\">spring.mail.properties.mail.smtp.starttls.enable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key attr-name\">spring.mail.properties.mail.smtp.starttls.required</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">### 7、调度中心通讯 TOKEN，非空时启用</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key attr-name\">xxl.job.accessToken</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">default_token</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">### 8、调度中心国际化设置，默认为中文版本，值设置为 “en” 时切换为英文版本</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key attr-name\">xxl.job.i18n</span><span class=\"token punctuation\">=</span></pre></td></tr></table></figure><blockquote>\n<p>注意：基本上上面的配置文件我们需要修改的只有第 5 点，修改数据库的地址，这要与我们前面初始化的数据库名称径，用户名密码保持一致；<br />\n第二个就是修改第 6 点，报警邮箱，因为该工程任务失败后有失败告警功能，可以通过邮件来提醒，如果我们需要此功能，可以配置一下。</p>\n</blockquote>\n<h3 id=\"142-部署调度中心\"><a class=\"anchor\" href=\"#142-部署调度中心\">#</a> 1.4.2、部署调度中心</h3>\n<p>该工程是一个 springboot 项目，我们只需要在 IDEA 中执行 XxlJobAdminApplication 类即可运行该工程：<br />\n<img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686648283472-4db9e00b-b602-44fa-874a-390ac4b00a02.png\" alt=\"image.png\" /></p>\n<h3 id=\"143-访问调度中心管理界面\"><a class=\"anchor\" href=\"#143-访问调度中心管理界面\">#</a> 1.4.3、访问调度中心管理界面</h3>\n<p>在浏览器输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3h4bC1qb2ItYWRtaW4=\">http://localhost:8080/xxl-job-admin</span> 然后输入用户名和密码（默认账密为 admin/123456），即可看到如下管理界面。<br />\n<img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686648368211-43ad04a6-d449-46e5-b37a-0c4b08dd30c3.png\" alt=\"image.png\" /></p>\n<h2 id=\"15-自建执行器项目\"><a class=\"anchor\" href=\"#15-自建执行器项目\">#</a> 1.5、自建执行器项目</h2>\n<p>以创建一个 springboot 版本的执行器为例</p>\n<h3 id=\"151-添加maven依赖\"><a class=\"anchor\" href=\"#151-添加maven依赖\">#</a> 1.5.1、添加 maven 依赖</h3>\n<ul>\n<li>在创建好的 springboot 项目的 pom.xml 文件中添加如下依赖：</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- xxl-rpc-core --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.xuxueli<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>xxl-job-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"152-配置执行器\"><a class=\"anchor\" href=\"#152-配置执行器\">#</a> 1.5.2、配置执行器</h3>\n<p>在创建好的 springboot 项目的配置文件 xxl-job.properties 添加如下配置：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### xxl-job admin address list, such as \"http://address\" or \"http://address01,http://address02\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">xxl.job.admin.addresses</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">http://127.0.0.1:8080/xxl-job-admin</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">### xxl-job, access token</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">xxl.job.accessToken</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">default_token</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">### xxl-job executor appname</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#xxl.job.executor.appname=xxl-job-executor-sample-cluster</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.appname</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">xxl-job-executor-sample</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">### xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.address</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">### xxl-job executor server-info</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.ip</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">9999</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">### xxl-job executor log-path</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.logpath</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">./xxl-job/jobhandler</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">### xxl-job executor log-retention-days</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">xxl.job.executor.logretentiondays</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr></table></figure><blockquote>\n<p>注意：</p>\n<ol>\n<li>配置执行器的名称、IP 地址、端口号，后面如果配置多个执行器时，要<strong>防止端口冲突</strong>。再就是<strong>执行器的名称</strong>，我们后面会到上一步的调度中心管理界面<strong>进行对应配置</strong>。</li>\n</ol>\n</blockquote>\n<h3 id=\"153-创建xxljobconfig配置类\"><a class=\"anchor\" href=\"#153-创建xxljobconfig配置类\">#</a> 1.5.3、创建 XxlJobConfig 配置类</h3>\n<p>在项目中创建 XxlJobConfig 并使用自定义的配置文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxl<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>executor<span class=\"token punctuation\">.</span>impl<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XxlJobSpringExecutor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Logger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoggerFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PropertySource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* @Description: xxl-job 配置类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* @Author: Guo.Yang</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>* @Date: 2023/06/13/09:42</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:xxl-job.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">XxlJobConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XxlJobConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.admin.addresses&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> adminAddresses<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.executor.appname&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> appname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.executor.ip&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> ip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.executor.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.accessToken&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.executor.logpath&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> logPath<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxl.job.executor.logretentiondays&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> logRetentionDays<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">XxlJobSpringExecutor</span> <span class=\"token function\">xxlJobExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>>>>>>>>> xxl-job config init.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">XxlJobSpringExecutor</span> xxlJobSpringExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XxlJobSpringExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setAdminAddresses</span><span class=\"token punctuation\">(</span>adminAddresses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setAppname</span><span class=\"token punctuation\">(</span>appname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setIp</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setLogPath</span><span class=\"token punctuation\">(</span>logPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        xxlJobSpringExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setLogRetentionDays</span><span class=\"token punctuation\">(</span>logRetentionDays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> xxlJobSpringExecutor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"154-创建任务jobhandler\"><a class=\"anchor\" href=\"#154-创建任务jobhandler\">#</a> 1.5.4、创建任务 JobHandler</h3>\n<blockquote>\n<p>注意：这里有个注解 @XxlJob (&quot;demoJobHandler&quot;)，对于 value 的值，我们会在下面进行相应配置。<br />\n在项目中创建一个 Handler，用于执行我们想要执行的东西，这里我只是简单的打印一行日志：</p>\n<p>注意⚠️： 以下代码列出了三种创建 job 的形式</p>\n<ol>\n<li>简单模式的 job</li>\n<li>接受 admin 管理后台传入参数的 job</li>\n<li>分片广播模式的 job（适用于 job 的集群模式，触发任务使集群每一台机器的任务都能执行）</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxl<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XxlJobHelper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>xxl<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">XxlJob</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>* @Description:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>* @Author: Guo.Yang</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>* @Date: 2023/06/13/09:47</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>* XxlJob 开发示例（Bean 模式）</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>* 开发步骤：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>*      1、任务开发：在 Spring Bean 实例中，开发 Job 方法；</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*      2、注解配置：为 Job 方法添加注解 \"@XxlJob (value=\" 自定义 jobhandler 名称 \", init =\"JobHandler 初始化方法 \", destroy =\"JobHandler 销毁方法 \")\"，注解 value 值对应的是调度中心新建任务的 JobHandler 属性的值。</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*      3、执行日志：需要通过 \"XxlJobHelper.log\" 打印执行日志；</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*      4、任务结果：默认任务结果为 \"成功\" 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 \"XxlJobHelper.handleFail/handleSuccess\" 自主设置任务结果；</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleXxlJob</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    * 简单任务实例（bean 模式）</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@XxlJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demoJobHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demoJobHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 需要执行的任务业务代码</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxl-job hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    * 获取 admin 传入的参数</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@XxlJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demoJobHandlerParams\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demoJobHandlerParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 获取后台管理传过来的参数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">String</span> jobParam <span class=\"token operator\">=</span> <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJobParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 需要执行的任务业务代码</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxl-job demoJobHandlerParams=&#123;&#125;\"</span><span class=\"token punctuation\">,</span>jobParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    * 2、分片广播任务</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@XxlJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shardingJobHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shardingJobHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 分片参数</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">int</span> shardIndex <span class=\"token operator\">=</span> <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShardIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">int</span> shardTotal <span class=\"token operator\">=</span> <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getShardTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分片参数：当前分片序号 = &#123;&#125;, 总分片数 = &#123;&#125;\"</span><span class=\"token punctuation\">,</span> shardIndex<span class=\"token punctuation\">,</span> shardTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分片参数：当前分片序号 = &#123;&#125;, 总分片数 = &#123;&#125;\"</span><span class=\"token punctuation\">,</span> shardIndex<span class=\"token punctuation\">,</span> shardTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 业务逻辑</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> shardTotal<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> shardIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 &#123;&#125; 片, 命中分片开始处理\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 &#123;&#125; 片, 命中分片开始处理\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 &#123;&#125; 片, 忽略\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第 &#123;&#125; 片, 忽略\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"16-在调度中心中配置执行器\"><a class=\"anchor\" href=\"#16-在调度中心中配置执行器\">#</a> 1.6、在调度中心中配置执行器</h2>\n<blockquote>\n<p>调度中心指的就是我们之前配置的 xxl-job-admin（后台管理）<br />\n调度中心前面我们已经配置好了，启动该配置中心，进入<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3h4bC1qb2ItYWRtaW4=\"> http://localhost:8080/xxl-job-admin</span> 界面。<br />\n初始化账密：admin/123456</p>\n</blockquote>\n<h3 id=\"161-配置执行器\"><a class=\"anchor\" href=\"#161-配置执行器\">#</a> 1.6.1、配置执行器</h3>\n<ul>\n<li>点击  执行器管理 --&gt;  新增执行器 --&gt;，如下如下界面，然后填充此表格，点击<strong>保存</strong>即可。</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686705576282-ee67da58-6685-4743-994c-6e4f4828de8f.png\" alt=\"image.png\" /></p>\n<ul>\n<li>执行器被成功注册</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686706714174-26685739-0035-45b3-89e3-c10c8a876798.png\" alt=\"image.png\" /><br />\n 下面是对这几个参数的介绍：</p>\n<ul>\n<li>\n<p>a<strong>ppname</strong>：是每个执行器集群的唯一标示 a<strong>ppname</strong>, 执行器会周期性以 a<strong>ppname</strong> 为对象进行自动注册。可通过该配置自动发现注册成功的执行器，供任务调度时使用；</p>\n</li>\n<li>\n<p><strong>名称</strong>：执行器的名称，因为 AppName 限制字母数字等组成，可读性不强，名称为了提高执行器的可读性；</p>\n</li>\n<li>\n<p>排序：执行器的排序，系统中需要执行器的地方，如任务新增，将会按照该排序读取可用的执行器列表；</p>\n</li>\n<li>\n<p>注册方式：调度中心获取执行器地址的方式，</p>\n</li>\n<li>\n<p>自动注册：执行器自动进行执行器注册，调度中心通过底层注册表可以动态发现执行器机器地址；</p>\n</li>\n<li>\n<p>手动录入：人工手动录入执行器的地址信息，多地址逗号分隔，供调度中心使用；</p>\n</li>\n<li>\n<p>机器地址：&quot;注册方式&quot; 为 &quot;手动录入&quot; 时有效，支持人工维护执行器的地址信息；</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>配置执行器时 AppName 需要与自建执行器项目中的 xxl.job.executor.appname=xxl-job-executor-sample 配置保持一致，且在自动注册中才能获取到注册节点，</li>\n<li>在手动注册执行器节点的时候，节点地址要写全，例如<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5OTk4Lw==\"> http://127.0.0.1:9998/</span>，如果是多个执行器节点的时候地址与地址之间需要用英文的逗号分隔开，例如：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5OTk4LyxodHRwOi8vMTI3LjAuMC4xOjk5OTkv\">http://127.0.0.1:9998/,http://127.0.0.1:9999/</span></li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"162-创建任务\"><a class=\"anchor\" href=\"#162-创建任务\">#</a> 1.6.2、创建任务</h3>\n<p>点击 任务管理 ---》新增任务 ---》<br />\n<img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686707501153-e7b09d24-631d-48c3-addd-f99f1e666325.png\" alt=\"image.png\" /><br />\n 参数说明</p>\n<ul>\n<li>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器，实现任务自动发现功能；另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器，可在 &quot;执行器管理&quot; 进行设置。</li>\n<li>任务描述：任务的描述信息，便于任务管理；</li>\n<li>路由策略：当执行器集群部署时，提供丰富的路由策略，包括；\n<ul>\n<li>FIRST（第一个）：固定选择第一个机器；</li>\n<li>LAST（最后一个）：固定选择最后一个机器；</li>\n<li>ROUND（轮询）：；</li>\n<li>RANDOM（随机）：随机选择在线的机器；</li>\n<li>CONSISTENT_HASH（一致性 HASH）：每个任务按照 Hash 算法固定选择某一台机器，且所有任务均匀散列在不同机器上。</li>\n<li>LEAST_FREQUENTLY_USED（最不经常使用）：使用频率最低的机器优先被选举；</li>\n<li>LEAST_RECENTLY_USED（最近最久未使用）：最久为使用的机器优先被选举；</li>\n<li>FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；</li>\n<li>BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li>\n<li>SHARDING_BROADCAST (分片广播)：广播触发对应集群中所有机器执行一次任务，同时系统自动传递分片参数；可根据分片参数开发分片任务；</li>\n<li>Cron：触发任务执行的 Cron 表达式；</li>\n</ul>\n</li>\n<li>运行模式：\n<ul>\n<li>BEAN 模式：任务以 JobHandler 方式维护在执行器端；需要结合 &quot;JobHandler&quot; 属性匹配执行器中任务；</li>\n<li>GLUE 模式 (Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自 IJobHandler 的 Java 类代码并 &quot;groovy&quot; 源码方式维护，它在执行器项目中运行，可使用 @Resource/@Autowire 注入执行器里中的其他服务；</li>\n<li>GLUE 模式 (Shell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;shell&quot; 脚本；</li>\n<li>GLUE 模式 (Python)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;python&quot; 脚本；</li>\n<li>GLUE 模式 (PHP)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;php&quot; 脚本；</li>\n<li>GLUE 模式 (NodeJS)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;nodejs&quot; 脚本；</li>\n<li>GLUE 模式 (PowerShell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 &quot;PowerShell&quot; 脚本；</li>\n<li>JobHandler：运行模式为 &quot;BEAN 模式&quot; 时生效，对应执行器中新开发的 JobHandler 类 “@JobHandler” 注解自定义的 value 值；</li>\n</ul>\n</li>\n<li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；\n<ul>\n<li>单机串行（默认）：调度请求进入单机执行器后，调度请求进入 FIFO 队列并以串行方式运行；</li>\n<li>丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；</li>\n<li>覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li>\n</ul>\n</li>\n<li>子任务：每个任务都拥有一个唯一的任务 ID (任务 ID 可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务 ID 所对应的任务的一次主动调度。</li>\n<li>任务超时时间：支持自定义任务超时时间，任务运行超时将会主动中断任务；</li>\n<li>失败重试次数；支持自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</li>\n<li>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；</li>\n<li>负责人：任务的负责人；</li>\n<li>执行参数：任务执行所需的参数，多个参数时用逗号分隔，任务执行时将会把多个参数转换成数组传入；可通过以下方式获取传入的参数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取后台管理传过来的参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> jobParam <span class=\"token operator\">=</span> <span class=\"token class-name\">XxlJobHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJobParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"二-启动测试\"><a class=\"anchor\" href=\"#二-启动测试\">#</a> 二、启动测试</h1>\n<h2 id=\"21-启动任务\"><a class=\"anchor\" href=\"#21-启动任务\">#</a> 2.1、启动任务</h2>\n<ul>\n<li>配置完执行器以及任务，我们只需要启动该任务，便可以运行了。</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686707971524-686309f9-9a99-49ba-bb48-d677f2455e50.png\" alt=\"image.png\" /></p>\n<h2 id=\"22-测试\"><a class=\"anchor\" href=\"#22-测试\">#</a> 2.2、测试</h2>\n<ul>\n<li>启动之后我们查看日志</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686708253518-5fe773a5-7116-4237-b764-642b954db063.png\" alt=\"image.png\" /><br />\n<img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686708221396-66431c35-8d5e-4d25-b8c7-234f1d7d7a9e.png\" alt=\"image.png\" /></p>\n<div class=\"note danger\">\n<p>注意：在项目中，只有通过 XxlJobLogger.log () 代码才能将日志打印到上面。<br />\n<img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686708485814-7c95b689-36db-4f05-ac0f-f3e89325e910.png\" alt=\"image.png\" /></p>\n</div>\n<ul>\n<li>项目中的控制台日志为</li>\n</ul>\n<p><img data-src=\"../images/xxl-job%E6%90%AD%E5%BB%BA_img/1686708375398-24d30830-73b3-4d9f-bcc5-e41a5e361b33-6841243-6841245.png\" alt=\"image.png\" /></p>\n<hr />\n",
            "tags": [
                "xxl-job"
            ]
        }
    ]
}